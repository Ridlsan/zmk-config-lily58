/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        word_left: word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT)>;
            label = "WORD_LEFT";
        };

        word_right: word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT)>;
            label = "WORD_RIGHT";
        };

        copy: text {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(C)>;
            label = "copy";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(X)>;
            label = "CUT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC           &kp N1  &kp N2  &kp N3        &kp N4        &kp N5                               &kp N6           &kp N7      &kp N8        &kp N9      &kp N0    &kp RBKT
&kp TAB           &kp Q   &kp W   &kp E         &kp R         &kp T                                &kp Y            &kp U       &kp I         &kp O       &kp P     &kp LBKT
&kp LEFT_SHIFT    &kp A   &kp S   &kp D         &kp F         &kp G                                &kp H            &kp J       &kp K         &kp L       &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z   &kp X   &kp C         &kp V         &kp B        &kp MINUS    &kp EQUAL  &kp N            &kp M       &kp KP_COMMA  &kp KP_DOT  &kp FSLH  &kp BACKSLASH
                                  &kp LEFT_GUI  &kp LEFT_ALT  &lt 1 GRAVE  &kp SPACE    &kp RET    &lt 2 BACKSPACE  &kp DELETE  &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        left {
            bindings = <
&kp F1  &kp F2  &kp F3          &kp F4          &kp F5           &kp F6                                 &kp F7         &kp F8        &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &kp HOME        &kp UP_ARROW    &kp END          &kp DELETE                             &kp PAGE_UP    &kp N7        &kp N8  &kp N9   &trans   &trans
&trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp BSPC                               &kp PAGE_DOWN  &kp N4        &kp N5  &kp N6   &trans   &trans
&trans  &trans  &trans          &trans          &trans           &trans      &kp PRINTSCREEN    &trans  &kp D          &kp N1        &kp N2  &kp N3   &trans   &trans
                                &trans          &trans           &trans      &trans             &trans  &trans         &kp NUMBER_0  &none
            >;
        };

        right {
            bindings = <
&trans  &trans  &trans          &trans          &trans           &trans                    &trans  &trans          &trans          &trans           &trans  &trans
&trans  &trans  &trans          &msc SCRL_UP    &trans           &trans                    &trans  &trans          &mmv MOVE_UP    &trans           &trans  &trans
&trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans                    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans  &trans    &trans  &trans  &trans          &trans          &trans           &trans  &trans
                                &trans          &trans           &trans  &trans    &trans  &trans  &trans          &trans
            >;
        };

        bt {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2       &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans     &trans     &trans    &trans    &trans
&kp F1      &kp F2            &kp F3             &kp F4             &kp F5        &kp F6                          &kp F7     &kp F8     &kp F9     &kp F10   &kp F11   &kp F12
&kp GRAVE   &kp EXCL          &kp AT             &kp HASH           &kp DOLLAR    &kp PRCNT                       &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp TILDE
&trans      &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans        &trans        &trans    &trans  &trans     &kp MINUS  &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE
                                                 &trans             &trans        &trans        &trans    &trans  &trans     &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        reserve {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans     &trans  &trans  &trans   &trans   &trans                     &trans       &trans     &trans     &trans    &trans     &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                     &kp N6       &kp N7     &kp N8     &kp N9    &kp N0     &trans
&kp F1     &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                     &trans       &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &trans
&kp F7     &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &kp KP_PLUS  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT   &kp BSLH
                           &trans   &trans   &trans   &trans    &trans  &trans       &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_5 {
            bindings = <
&kp ESC    &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11   &kp F12
&kp TAB    &kp Q   &kp W   &kp E   &kp R   &kp T                     &kp Y   &kp U   &kp I   &kp O    &kp P     &kp LEFT_BRACKET
&kp LSHFT  &kp A   &kp S   &kp D   &kp F   &kp G                     &kp H   &kp J   &kp K   &kp L    &kp SEMI  &kp SINGLE_QUOTE
&trans     &kp Z   &kp X   &kp C   &kp V   &kp B   &kp N     &kp M   &kp N   &kp M   &trans  &trans   &trans    &trans
                           &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans    &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &kp HOME  &kp UP    &kp END    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans     &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans      &trans  &trans       &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans      &trans  &trans       &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &word_left  &trans  &word_right  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans      &trans  &trans       &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        bt {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
